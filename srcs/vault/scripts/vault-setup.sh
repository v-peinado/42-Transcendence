#!/bin/bash

# This is the main script that orchestrates the entire configuration process.
# Responsibilities:
# - Loading required modules
# - Coordinating initialization sequence
# - Dependency validation
# - Global error handling
# - Cleanup of sensitive variables

# Define modules path
MODULES_PATH="/usr/local/bin"
REQUIRED_MODULES=(
    "${MODULES_PATH}/logger.sh"
    "${MODULES_PATH}/vault-config.sh"
    "${MODULES_PATH}/vault-init.sh"
    "${MODULES_PATH}/vault-secrets.sh"
)

# Verify and load modules
for module in "${REQUIRED_MODULES[@]}"; do
    if [ ! -f "$module" ]; then
        echo "Error: Required module not found: $module"
        exit 1
    fi
    source "$module"
done

# Ensure SSL directory exists and has proper permissions
ensure_ssl_dir() {
    echo "Ensuring SSL directory exists with proper permissions..."
    
    # Create directory with root permissions
    mkdir -p /tmp/ssl || true
    
    # Set permissions for all users
    chmod -R 777 /tmp/ssl || true
    
    # Wait for SSL certificates to be generated by ssl-manager
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if [ -f "/tmp/ssl/transcendence.crt" ] && [ -f "/tmp/ssl/transcendence.key" ]; then
            log_message "SSL certificates found"
            # Make sure certificates are readable by all
            chmod 644 /tmp/ssl/transcendence.crt || true
            chmod 644 /tmp/ssl/transcendence.key || true
            return 0
        fi
        
        log_message "Waiting for SSL certificates... (Attempt $attempt/$max_attempts)"
        attempt=$((attempt + 1))
        sleep 2
    done
    
    log_message "WARNING: SSL certificates not found, will generate locally"
    /usr/local/bin/generate-ssl.sh || echo "Failed to generate SSL certificates"
    return 0
}

wait_for_vault_ready() {
    local max_attempts=15
    local attempt=1
    
    log_message "Waiting for Vault to be fully ready..."
    while [ $attempt -le $max_attempts ]; do
        if curl -s -k "${VAULT_ADDR}/v1/sys/health" >/dev/null 2>&1; then
            log_message "✅ Vault is ready"
            return 0
        fi
        log_message "⏳ Attempt $attempt/$max_attempts - Waiting for Vault to be ready..."
        attempt=$((attempt + 1))
        sleep 2
    done
    
    log_message "⚠️ Warning: Timed out waiting for Vault, continuing anyway..."
    return 0
}

# Main setup function
setup() {
    # Ensure SSL directory exists and has proper permissions
    ensure_ssl_dir
    
    # Start Vault server
    start_vault
    
    # Wait for Vault to be fully ready
    wait_for_vault_ready
    
    # Initialize and unseal Vault
    initialize_vault
    
    # Wait for Vault to be ready after unsealing
    wait_for_vault_ready
    
    # Configure Vault and policies
    configure_vault
    
    # Wait for policies to be applied (implementing a proper check)
    if vault policy list >/dev/null 2>&1; then
        log_message "✅ Vault policies applied successfully"
    else
        log_message "⚠️ Warning: Could not verify policies, continuing anyway..."
    fi
    
    # Store secrets
    store_secrets
    
    # Keep vault running in foreground
    log_message "Vault setup complete. Keeping vault running in foreground..."
    tail -f /dev/null
}

# Run setup
setup
