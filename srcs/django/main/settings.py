"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from django.core.management.utils import get_random_secret_key

load_dotenv()																# Cargar variables de entorno desde el archivo .env

# Construir rutas de directorios base y raíz del proyecto Django (main)
BASE_DIR = Path(__file__).resolve().parent.parent

# Configuración básica del proyecto
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', get_random_secret_key())	# Clave secreta para la generación de tokens y contraseñas (generar una clave aleatoria)
DEBUG = True																# Modo de depuración (True para desarrollo, False para producción)

# Definir hosts permitidos en producción (por defecto no permitimos ningún host)
#ALLOWED_HOSTS = []

# Definir hosts permitidos en producción (por defecto no permitimos ningún host)
#ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Definir aplicaciones instaladas en el proyecto
INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentication',
    'authentication.fortytwo_auth',
    'corsheaders',
]

# Configuración de Jazzmin (panel de administración personalizado basado en Django Admin)
JAZZMIN_SETTINGS = {
    "site_title": "Pong Admin",
    "site_header": "Pong Administration",
    "welcome_sign": "Bienvenido al Panel de Administración",
    "show_ui_builder": True,
    "changeform_format": "horizontal_tabs",
}

# Configuración de middleware (intermediarios por los que pasan las peticiones entre el cliente y la aplicación)
# Los middleware se ejecutan en orden de arriba hacía abajo y están definidos por defecto en Django
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',					# Middleware de seguridad
    'corsheaders.middleware.CorsMiddleware',							# Middleware para CORS
    'django.middleware.common.CommonMiddleware',						# Middleware común (para el manejo de cookies)
    'django.middleware.csrf.CsrfViewMiddleware',						# Middleware para protección CSRF (Cross-Site Request Forgery)
    'django.contrib.sessions.middleware.SessionMiddleware',				# Middleware para el manejo de sesiones
    'django.contrib.auth.middleware.AuthenticationMiddleware',			# Middleware para la autenticación de usuarios
    'django.contrib.messages.middleware.MessageMiddleware',				# Middleware para el manejo de mensajes
    'django.middleware.clickjacking.XFrameOptionsMiddleware',			# Middleware para protección contra ataques de clickjacking
]

# Configuración de CORS (Cross-Origin Resource Sharing - Compartir recursos entre diferentes dominios)
CORS_ALLOW_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']
CORS_ALLOW_ALL_ORIGINS = DEBUG if True else False						# Permitir todos los orígenes en desarrollo 
CORS_ALLOWED_ORIGINS = [												# Orígenes permitidos para CORS
    "https://localhost:8443",
    "http://localhost:8080",
]
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS								# Orígenes de confianza para CSRF

# Configuración de plantillas y archivos estáticos
ROOT_URLCONF = 'main.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'authentication/web/templates')],	# Directorio de plantillas personalizadas (desarrollo)
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI = Web Server Gateway Interface (Interfaz de pasarela de servidor web)
# Es una especificación para la comunicación entre servidores web y aplicaciones web o frameworks de aplicaciones web
WSGI_APPLICATION = 'main.wsgi.application'

# Configuración de la base de datos
DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("POSTGRES_DB", "db.sqlite3"),
        "USER": os.environ.get("POSTGRES_USER", "user"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

# Validación de contraseñas para los usuarios (contraseñas seguras)
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},	# Validar que la contraseña no sea similar a atributos del usuario
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},				# Validar que la contraseña tenga una longitud mínima
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},			# Validar que la contraseña no sea una contraseña común
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},			# Validar que la contraseña contenga al menos un dígito
]

# Configuración de internacionalización y zonas horarias
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Archivos estáticos y media (imágenes, videos, etc.)
# En producción, estos archivos deberan ser servidos por NGINX
# y se configurarán en el archivo de configuración de Nginx (comentar o eliminar estas líneas)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
FILE_UPLOAD_PERMISSIONS = 0o644

# Configuración de autenticación personalizada con el modelo CustomUser definido en authentication.models
# Usamos el modelo CustomUser en lugar del modelo de usuario predeterminado de Django porque hemos añadido campos adicionales
# y hemos modificado el comportamiento de la autenticación para permitir el inicio de sesión con 42 o con un correo electrónico
AUTH_USER_MODEL = 'authentication.CustomUser'
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'user'
LOGOUT_REDIRECT_URL = 'login'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Variables de entorno para la autenticación con 42
FORTYTWO_CLIENT_ID = os.environ.get('FORTYTWO_CLIENT_ID')
FORTYTWO_CLIENT_SECRET = os.environ.get('FORTYTWO_CLIENT_SECRET')
FORTYTWO_REDIRECT_URI = os.environ.get('FORTYTWO_REDIRECT_URI')
FORTYTWO_API_UID = os.environ.get('FORTYTWO_API_UID')
FORTYTWO_API_SECRET = os.environ.get('FORTYTWO_API_SECRET')
FORTYTWO_API_URL = os.environ.get('FORTYTWO_API_URL')

# Variables de entorno para el envío de correos electrónicos (SMTP)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'# Usar este backend para imprimir los correos en la consola
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'	# Usar este backend para enviar correos reales
EMAIL_HOST = os.environ.get('EMAIL_HOST')						
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))				
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS') == 'True'		# Usar TLS para enviar correos (TLS es una versión segura de SSL)
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')				
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')		
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')		
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'						# Se requiere verificar la dirección de correo electrónico para activar la cuenta

# Settings para el manejo de sesiones y cookies
if DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']					# Hosts permitidos en desarrollo
    SITE_URL = 'http://localhost:8000'							# URL del sitio en desarrollo
    SECURE_SSL_REDIRECT = False									# Redirección a HTTPS
    SESSION_COOKIE_SECURE = False								# Cookies seguras (no las vamos a usar en desarrollo porqué no tenemos HTTPS)
    CSRF_COOKIE_SECURE = False								
else:
    SITE_URL = 'https://localhost:8443'							# URL del sitio en producción
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Settings de seguridad adicionales
SECURE_BROWSER_XSS_FILTER = True								# Protección contra ataques XSS
PASSWORD_RESET_TIMEOUT = 300									# 300 segundos (5 minutos)	
	
# Estas no son necesarias si se usa NGINX como proxy, pero se pueden dejar activadas para mayor seguridad
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')	# Esto es para Heroku (no es necesario para NGINX)
SECURE_CONTENT_TYPE_NOSNIFF = True								# Protección contra ataques MIME sniffing (no es necesario para NGINX)
X_FRAME_OPTIONS = 'DENY'										# Protección contra ataques de clickjacking (no es necesario para NGINX)

# Settings para la generación de tokens JWT
JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY', 'your-secret-key')
JWT_ALGORITHM = 'HS256'											# Algoritmo de encriptación estándar


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        # 'logstash': {
        #     '()': 'logstash_formatter.LogstashFormatterV1',
        # },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'simple',
        },
        # 'logstash': {
        #     'level': 'DEBUG',
        #     'class': 'logstash.TCPLogstashHandler',
        #     'host': 'logstash',  # Cambia esto a la dirección de tu servidor Logstash
        #     'port': 5000,  # Cambia esto al puerto en el que Logstash está escuchando
        #     'version': 1,
        #     'message_type': 'logstash',  # Tipo de mensaje (puede ser cualquier string)
        #     'fqdn': False,
        #     'tags': ['django'],
        #     'formatter': 'logstash',
        #},
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'], 
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'file'], 
            'level': 'ERROR',
            'propagate': False,
        },
        'mylogger': {
            'handlers': ['console', 'file'], 
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'propagate': True,
        },
        'websockets': {
            'handlers': ['console', 'file'], 
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}