#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "main.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()

# This file is automatically generated by Django when creating a project.
# It imports Django's module and executes the execute_from_command_line() function with sys.argv as argument.
# sys.argv is a list of arguments passed to the Python script from the command line (this list is automatically generated when running a script).
# The first argument is the script name, and the second is the command to execute.
# For example, if you run 'python manage.py runserver', sys.argv will be ['manage.py', 'runserver'].
# Therefore, execute_from_command_line(['manage.py', 'runserver']) will execute Django's 'runserver' command.
# Basically, this file is the entry point for executing Django commands programmatically from the command line.
