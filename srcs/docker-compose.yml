networks:
  trancendence-backend:
    driver: bridge
  app-network:
    driver: bridge

services:
  web:
    build:
      context: ./django
    container_name: django
    ports:
      - "8000:8000"
    networks:
      - trancendence-backend
    volumes:
      - django_static:/app/static
      - django_media:/app/media
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    restart: always

  db:
    image: postgres:17
    container_name: db 
    expose:
      - "5432"
    networks:
      - trancendence-backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    expose:
      - "80"
      - "443"
      - "8443"
    networks:
      - trancendence-backend
      - app-network
    volumes:
      - type: volume
        source: nginx_static
        target: /usr/share/nginx/html
      - type: volume
        source: django_media
        target: /usr/share/nginx/html/media
      - ssl_certs:/tmp/ssl:rw
    depends_on:
      - web
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-k", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  waf:
    build:
      context: .
      dockerfile: waf/Dockerfile
    ports:
      - "8082:8081"
      - "8445:8444"
      - "8200:8200"
    networks:
      - trancendence-backend
      - app-network
    volumes:
      - ssl_certs:/tmp/ssl:rw
      - waf_logs:/var/log/nginx
    env_file:
      - .env
    depends_on:
      - nginx
      - web
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    expose:
      - "6379"
    networks:
      - trancendence-backend
    restart: always
    command: ["redis-server", "--save", "", "--appendonly", "no"] 
  
  front:
    build: ./front
    container_name: front
    ports:
      - "3000:3000"
    volumes:
      - ./front:/app
    networks:
      - app-network
    restart: always

volumes:
  postgres_data:
    driver: local        # Tipo de driver del volumen, en este caso 'local'
    driver_opts:
      type: none         # Tipo de dispositivo, se montará un directorio del host, no se utilizará un dispositivo
      device: ./postgres_data  # Ruta relativa en el host donde se almacenarán los datos de PostgreSQL
      o: bind
  django_media:
  django_static:
  nginx_static:
  waf_logs:
  ssl_certs:
    name: ssl_certs
