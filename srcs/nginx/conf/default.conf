# Configuración de seguridad básica
# ----------------------------------
# Ocultar la versión de nginx para evitar que los atacantes obtengan esta información
server_tokens off;

# Configuración de WebSocket
# ------------------------
# Maneja las conexiones WebSocket, si no hay upgrade, cierra la conexión
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Control de tasa de peticiones
# ---------------------------
# Limita las peticiones API generales a 10 por segundo por IP
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
# Limita los intentos de login a 5 por segundo por IP (protección contra brute force)
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/s;

# Timeouts de proxy
# ---------------
# Establece límites de tiempo para evitar conexiones colgadas
proxy_connect_timeout 60s;
proxy_send_timeout 60s;
proxy_read_timeout 60s;

# Configuración SSL/TLS
# -------------------
# Preferir los cifrados del servidor y usar solo cifrados seguros
ssl_prefer_server_ciphers on;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
# Caché de sesiones SSL para mejorar el rendimiento
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;

# Configuración del servidor
# ------------------------
server {
    # Escuchar en puerto 8443 con SSL habilitado
    listen 8443 ssl;
    server_name localhost;

    # Rutas a los certificados SSL
    ssl_certificate /tmp/ssl/transcendence.crt;
    ssl_certificate_key /tmp/ssl/transcendence.key;
    # Solo permitir protocolos TLS modernos y seguros
    ssl_protocols TLSv1.2 TLSv1.3;

    # Configuración de archivos estáticos
    root /usr/share/nginx/html;
    index index.html;

    # Endpoint de health check
    # ----------------------
    location /health {
        access_log off;  # No registrar estas peticiones
        return 200 'OK';
        add_header Content-Type text/plain;
    }

    # Configuración de la API general
    # -----------------------------
    location /api {
        # Limitar peticiones con burst permitido
        limit_req zone=api_limit burst=20 nodelay;
        # Proxy hacia el servicio web Django
        proxy_pass http://web:8000;
        # Cabeceras necesarias para el proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Cabeceras para WebSocket
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Configuración específica para login
    # --------------------------------
    location /api/auth/login {
        # Limitar intentos de login más estrictamente
        limit_req zone=login_limit burst=5 nodelay;
        # Misma configuración de proxy que la API general
        proxy_pass http://web:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Manejo de rutas frontend (SPA)
    # ----------------------------
    location / {
        # Redireccionar todo al index.html para SPA
        try_files $uri $uri/ /index.html;
    }
}