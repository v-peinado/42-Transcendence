networks:
  transcendence-backend:
    driver: bridge
  app-network:
    driver: bridge

services:
  web:
    build:
      context: ./srcs/django
    # ports:  # This only was used for development!
    #   - "8000:8000"
    expose:
      - "8000"
    networks:
      - transcendence-backend
    volumes:
      - django_static:/app/static
      - django_media:/app/media:rw
      - ssl_certs:/tmp/ssl:ro
    depends_on:
      waf:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./srcs/.env
    restart: always

  db:
    build:
      context: ./srcs/db
    expose:
      - "5432"
    networks:
      - transcendence-backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ssl_certs:/tmp/ssl:rw
    depends_on:
      ssl-manager:
        condition: service_completed_successfully
      waf:
        condition: service_healthy
    entrypoint:
      - /bin/bash
      - -c
      - |
        /usr/local/bin/get-vault-secrets.sh
        # Config directory for certificates (NOT inside data directory)
        mkdir -p /var/lib/postgresql/ssl
        # Fix certificate permissions first
        /usr/local/bin/fix-certificate-permissions.sh

        # Try copying with different permissions and fallback options
        if [ -r "/tmp/ssl/transcendence.crt" ] && [ -r "/tmp/ssl/transcendence.key" ]; then
          echo "Certificate files are readable, proceeding with copy"
          cp /tmp/ssl/transcendence.crt /var/lib/postgresql/ssl/server.crt
          cp /tmp/ssl/transcendence.key /var/lib/postgresql/ssl/server.key
        else
          echo "ERROR: Certificate files are not readable, checking permissions:"
          ls -la /tmp/ssl/
          echo "Attempting to copy with root permissions..."
          # Create temporary copies with appropriate permissions
          cat /tmp/ssl/transcendence.crt > /var/lib/postgresql/ssl/server.crt
          cat /tmp/ssl/transcendence.key > /var/lib/postgresql/ssl/server.key || echo "Failed to copy key file"
        fi
        chmod 600 /var/lib/postgresql/ssl/server.key
        chmod 644 /var/lib/postgresql/ssl/server.crt
        chown -R postgres:postgres /var/lib/postgresql/ssl

        # Método para arreglar la configuración de PostgreSQL si ya existe
        if [ -f "/var/lib/postgresql/data/postgresql.conf" ]; then
          echo "Verificando postgresql.conf para eliminar configuraciones incorrectas..."
          # Crear un backup
          cp "/var/lib/postgresql/data/postgresql.conf" "/var/lib/postgresql/data/postgresql.conf.bak"
          
          # Eliminar cualquier línea duplicada o mal formateada relacionada con SSL
          sed -i '/^ssl[^=]*=[^=]*=[^=]*/d' "/var/lib/postgresql/data/postgresql.conf"
          sed -i '/^ssl.*=.*=.*/d' "/var/lib/postgresql/data/postgresql.conf"
          
          # Eliminar configuraciones SSL existentes para evitar duplicados
          sed -i '/^ssl =/d' "/var/lib/postgresql/data/postgresql.conf"
          sed -i '/^ssl_cert_file =/d' "/var/lib/postgresql/data/postgresql.conf"
          sed -i '/^ssl_key_file =/d' "/var/lib/postgresql/data/postgresql.conf"
          sed -i '/^ssl_ca_file =/d' "/var/lib/postgresql/data/postgresql.conf"
          sed -i '/^ssl_ciphers =/d' "/var/lib/postgresql/data/postgresql.conf"
          
          # Agregar configuración SSL correcta
          echo "" >> "/var/lib/postgresql/data/postgresql.conf"
          echo "# SSL Configuration - Added $(date)" >> "/var/lib/postgresql/data/postgresql.conf"
          echo "ssl = on" >> "/var/lib/postgresql/data/postgresql.conf"
          echo "ssl_cert_file = '/var/lib/postgresql/ssl/server.crt'" >> "/var/lib/postgresql/data/postgresql.conf"
          echo "ssl_key_file = '/var/lib/postgresql/ssl/server.key'" >> "/var/lib/postgresql/data/postgresql.conf"
          echo "ssl_ca_file = '/var/lib/postgresql/ssl/server.crt'" >> "/var/lib/postgresql/data/postgresql.conf"
          echo "ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL'" >> "/var/lib/postgresql/data/postgresql.conf"
          echo "log_connections = on" >> "/var/lib/postgresql/data/postgresql.conf"
          
          echo "Configuración SSL actualizada correctamente."
        fi

        # Iniciar PostgreSQL
        docker-entrypoint.sh postgres &
        db_pid=$!
        export PG_PID=$db_pid

        # Esperar a que PostgreSQL esté completamente inicializado
        echo "Esperando inicialización completa de PostgreSQL..."
        max_attempts=30
        attempt=1
        while ! pg_isready -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -q; do
          echo "PostgreSQL aún no está listo - esperando... (Intento $attempt de $max_attempts)"
          attempt=$((attempt + 1))
          if [ $attempt -gt $max_attempts ]; then
            echo "ERROR: PostgreSQL no pudo iniciar después de $max_attempts intentos"
            if [ -f "/var/lib/postgresql/data/postgresql.conf" ]; then
              echo "Mostrando las últimas 20 líneas de postgresql.conf:"
              tail -n 20 "/var/lib/postgresql/data/postgresql.conf"
              
              echo "Restaurando backup de postgresql.conf si existe..."
              if [ -f "/var/lib/postgresql/data/postgresql.conf.bak" ]; then
                cp "/var/lib/postgresql/data/postgresql.conf.bak" "/var/lib/postgresql/data/postgresql.conf"
                echo "Backup restaurado, intentando reiniciar PostgreSQL..."
                docker-entrypoint.sh postgres &
                db_pid=$!
                sleep 10
              fi
            fi
            break
          fi
          sleep 2
        done

        # Si PostgreSQL está listo, verificar configuración SSL
        if pg_isready -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -q; then
          echo "Verificando configuración de PostgreSQL SSL con psql..."
          current_ssl_status=$(PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USER -d $POSTGRES_DB -At -c "SHOW ssl;" 2>/dev/null || echo "off")
          echo "Estado SSL actual: $current_ssl_status"

          if [ "$current_ssl_status" != "on" ]; then
            echo "SSL no está activado. Intentando activar mediante SQL..."
            # Intentar activar SSL a través de SQL
            PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USER -d $POSTGRES_DB -c "ALTER SYSTEM SET ssl = 'on';" 2>/dev/null
            PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT pg_reload_conf();" 2>/dev/null
          fi

          # Prueba de conexión SSL explícita
          echo "Verificando conexión SSL..."
          if PGSSLMODE=require PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USER -d $POSTGRES_DB -h localhost -c "SELECT 'Conexión SSL exitosa';" 2>/dev/null; then
            echo "✅ Prueba de conexión SSL exitosa"
          else
            echo "❌ Prueba de conexión SSL fallida"
          fi
        else
          echo "ERROR: PostgreSQL no está disponible para verificación SSL"
        fi

        # Mantener el contenedor funcionando con el PID correcto
        wait $db_pid
    env_file:
      - ./srcs/.env
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s # Extended startup period

  nginx:
    build:
      context: ./srcs
      dockerfile: nginx/Dockerfile
    expose:
      - "80"
      - "443"
      - "8443"
    networks:
      - transcendence-backend
      - app-network
    volumes:
      - type: volume
        source: nginx_static
        target: /usr/share/nginx/html
      - type: volume
        source: django_media
        target: /usr/share/nginx/html/media:rw
      - django_static:/usr/share/nginx/html/static:ro
      - ssl_certs:/tmp/ssl:ro
    depends_on:
      ssl-manager:
        condition: service_completed_successfully
      web:
        condition: service_started
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-k", "--fail", "-H", "Host: localhost", "https://localhost:8443/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  waf:
    build:
      context: ./srcs
      dockerfile: waf/Dockerfile
    ports:
      - "8082:8081" # WAF (http redirect to https)
      - "8445:8444" # WAF (https)
      #- "8200:8200" # Vault (only for development)
    expose:
      - "8200" # Vault
    networks:
      - transcendence-backend
      - app-network
    volumes:
      - ssl_certs:/tmp/ssl:rw
      - waf_logs:/var/log/nginx
      - vault_data:/etc/vault.d/data
      - django_media:/usr/share/nginx/html/media:rw
      - ./srcs/waf/custom-nginx.conf.template:/etc/nginx/nginx.conf.template
    env_file:
      - ./srcs/.env
    command: >
      sh -c "envsubst '$$IP_SERVER' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf &&
             /usr/local/bin/vault-setup.sh"
    restart: always
    depends_on:
      ssl-manager:
        condition: service_completed_successfully
    healthcheck:
      test:
        - "CMD-SHELL"
        - "curl -k https://localhost:8200/v1/sys/health || curl -k --fail --max-time 1 http://localhost:8081/health || exit 0"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  redis:
    image: redis:latest
    expose:
      - "6379"
    networks:
      - transcendence-backend
    restart: always
    command: [ "redis-server", "--save", "", "--appendonly", "no" ]

  front:
    build: ./srcs/front
    container_name: front
    # ports:
    #   - "3000:3000"
    expose:
      - "3000"
    volumes:
      - ./srcs/front:/app
    networks:
      - app-network
    restart: always

  ssl-manager:
    build:
      context: ./srcs/ssl
    volumes:
      - ssl_certs:/ssl:rw
    env_file:
      - ./srcs/.env
    networks:
      - transcendence-backend

volumes:
  django_media:
    name: django_media
  django_static:
  nginx_static:
  waf_logs:
  ssl_certs:
    name: ssl_certs
  vault_data:
    driver: local
  postgres_data:
