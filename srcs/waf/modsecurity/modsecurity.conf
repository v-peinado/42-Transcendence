# This differs from CSR in that it configures the ModSecurity rules engine
# and establishes the paths for log files and temporary directories.
# Sets the logging and audit level, and configures the content type
# to be analyzed.

# Basic Configuration
SecRuleEngine On														# ModSecurity Rules Engine
SecRequestBodyAccess On													# Client Request Analysis (Analyze POST request parameters)
SecResponseBodyAccess On												# Server Response Analysis (Analyze webpage content)
SecResponseBodyMimeType text/plain text/html text/xml application/json	# Content types to analyze (text, html, xml, json)

# Logging Configuration
SecAuditEngine On														# Rules Auditing
SecAuditLog /var/log/modsecurity/audit.log								# Audit logs path
SecDebugLog /var/log/modsecurity/debug.log								# Debug logs path
SecDebugLogLevel 4														# Debug log level, 4 (1 = low, 9 = high)

# Temporary Directories
SecTmpDir /tmp
SecDataDir /tmp
SecUploadDir /tmp
SecUploadKeepFiles On
SecUploadFileMode 0644

# Request body limits - Updated for ModSecurity 3.0
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072
SecRequestBodyLimitAction Reject

# Performance tuning
SecPcreMatchLimit 250000
SecPcreMatchLimitRecursion 250000

# Request Body Processor Configuration for the rest of the rules
SecRule REQUEST_URI "@beginsWith /api/profile/" \
    "id:1000015,\
    phase:1,\
    pass,\
    nolog,\
    setvar:tx.reqbody_processor=MULTIPART"

# Request body processor for JSON content type in the request body
SecRule REQUEST_HEADERS:Content-Type "text/html|application/javascript" \
    "id:900012,\
    phase:1,\
    deny,\
    status:403,\
    log,\
    msg:'Invalid Content-Type'"

# Order of chargement of the rules
# 1. modsecurity.conf	<-- This file (is the motor of ModSecurity)
# 2. crs-setup.conf	<-- CRS configuration (Core Rule Set is the ruleset of ModSecurity)
# 3. main.conf 		<-- rules configuration (custom rules)